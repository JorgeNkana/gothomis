DELIMITER //
-- DROP PROCEDURE IF EXISTS `repair_invoices`//
alter table tbl_invoice_lines add if not exists (category_description varchar(150) null)//
-- CREATE PROCEDURE `repair_invoices`() BEGIN IF(select count(*) from tbl_invoice_lines where category_description IS NOT NULL) = 0 THEN BEGIN DROP TRIGGER IF EXISTS filters; DROP TRIGGER IF EXISTS payment_details; DROP TRIGGER IF EXISTS create_searchable_bill_details; DROP TRIGGER IF EXISTS update_searchable_bill_details; DROP TRIGGER IF EXISTS delete_searchable_bill_details; DROP TRIGGER IF EXISTS delete_outdated_bills; alter table tbl_invoice_lines add if not exists (item_id int(10) unsigned null, item_category varchar(50) null, dept_id int(10) unsigned null,sub_dept_id int(10) unsigned null, department_name varchar(50) null,sub_department_name varchar(50) null, dob date null, age varchar(50), gender varchar(6) null, first_name varchar(50) null, middle_name varchar(50) null, last_name varchar(50) null, medical_record_number varchar(50) null, mobile_number varchar(50) null, name varchar(50) null);  update tbl_invoice_lines set dob = (case when tbl_invoice_lines.patient_id is not null then (select dob from tbl_patients where id=tbl_invoice_lines.patient_id LIMIT 1) else (select dob from tbl_corpses where id=tbl_invoice_lines.corpse_id LIMIT 1) end); update tbl_invoice_lines set age = (CASE WHEN TIMESTAMPDIFF(YEAR,dob, CURRENT_DATE) <> 0 THEN CONCAT(TIMESTAMPDIFF(YEAR,dob, CURRENT_DATE), ' Years') ELSE CASE WHEN TIMESTAMPDIFF(MONTH,dob, CURRENT_DATE) <> 0 THEN CONCAT(TIMESTAMPDIFF(MONTH, dob, CURRENT_DATE), ' Months') ELSE CONCAT(TIMESTAMPDIFF(DAY, dob, CURRENT_DATE), ' Days') END END); update tbl_invoice_lines set gender = (case when tbl_invoice_lines.patient_id is not null then (select gender from tbl_patients where id=tbl_invoice_lines.patient_id LIMIT 1) else (select gender from tbl_corpses where id=tbl_invoice_lines.corpse_id LIMIT 1) end); update tbl_invoice_lines set first_name = (case when tbl_invoice_lines.patient_id is not null then (select first_name from tbl_patients where id=tbl_invoice_lines.patient_id LIMIT 1) else (select first_name from tbl_corpses where id=tbl_invoice_lines.corpse_id LIMIT 1) end); update tbl_invoice_lines set middle_name = (case when tbl_invoice_lines.patient_id is not null then (select middle_name from tbl_patients where id=tbl_invoice_lines.patient_id LIMIT 1) else (select middle_name from tbl_corpses where id=tbl_invoice_lines.corpse_id LIMIT 1) end); update tbl_invoice_lines set last_name = (case when tbl_invoice_lines.patient_id is not null then (select last_name from tbl_patients where id=tbl_invoice_lines.patient_id LIMIT 1) else (select last_name from tbl_corpses where id=tbl_invoice_lines.corpse_id LIMIT 1) end); update tbl_invoice_lines set medical_record_number = (case when tbl_invoice_lines.patient_id is not null then (select medical_record_number from tbl_patients where id=tbl_invoice_lines.patient_id LIMIT 1) else (select corpse_record_number from tbl_corpses where id=tbl_invoice_lines.corpse_id LIMIT 1) end); update tbl_invoice_lines set mobile_number = (case when tbl_invoice_lines.patient_id is not null then (select mobile_number from tbl_patients where id=tbl_invoice_lines.patient_id LIMIT 1) else (select mobile_number from tbl_corpses where id=tbl_invoice_lines.corpse_id LIMIT 1) end); update tbl_invoice_lines set name = (select name from users where id = tbl_invoice_lines.user_id LIMIT 1); update tbl_invoice_lines set category_description = (select category_description from tbl_payments_categories where id = tbl_invoice_lines.main_category_id LIMIT 1); update tbl_invoice_lines set item_id = (select item_id from tbl_item_prices where id = tbl_invoice_lines.item_price_id LIMIT 1);update tbl_invoice_lines set item_category = (select item_category from tbl_item_type_mappeds where item_id = tbl_invoice_lines.item_id LIMIT 1); update tbl_invoice_lines set dept_id = (select dept_id from tbl_items where tbl_items.id = tbl_invoice_lines.item_id LIMIT 1); update tbl_invoice_lines set sub_dept_id = case when exists(select t1.id from tbl_orders t1 where t1.test_id = tbl_invoice_lines.item_id) then case when exists(select t1.id from tbl_testspanels t1 where  t1.item_id = tbl_invoice_lines.item_id) then (select  sub_department_id from tbl_testspanels t1 INNER JOIN tbl_equipments t2 ON t2.id = t1.equipment_id INNER JOIN tbl_sub_departments  t3 ON t3.id=t2.sub_department_id where  t1.item_id = tbl_invoice_lines.item_id LIMIT 1) else (select sub_dept_id from tbl_tests where tbl_tests.item_id = tbl_invoice_lines.item_id LIMIT 1) end else (select sub_dept_id from tbl_item_sub_departments where tbl_item_sub_departments.item_id = tbl_invoice_lines.item_id LIMIT 1) end; update tbl_invoice_lines set department_name = (select department_name from tbl_departments where tbl_departments.id = tbl_invoice_lines.dept_id LIMIT 1); update tbl_invoice_lines set sub_department_name = (select sub_department_name from tbl_sub_departments where tbl_sub_departments.id = tbl_invoice_lines.sub_dept_id LIMIT 1);END; END IF; END//
DELIMITER ;
-- CALL repair_invoices();